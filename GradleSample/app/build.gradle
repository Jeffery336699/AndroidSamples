// 需要放在顶部
//plugins {
//    id 'com.happy.custompluginc'
//}

apply plugin: 'com.android.application'
apply plugin: CustomPluginA

// 为方便控制台显示内容，可以注释该引用
apply from: 'project_task_examples.gradle'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.zjx.happy.learning"
        minSdkVersion 23
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

//        javaCompileOptions {
//            annotationProcessorOptions {
//                includeCompileClasspath false
//            }
//        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation 'com.android.tools.build:gradle:3.3.1'


    implementation "com.google.auto.value:auto-value:1.4.1"
    annotationProcessor "com.google.auto.value:auto-value:1.4.1"
}

/**------------------- 自定义插件：直接在脚本文件中定义，其局限性较大 -------------------*/

// 定义一个Extension类用来接收脚本传的参数
class CustomExtensionA {
    String message = 'Hello Custom PluginA'

    // 还可以定义其他配置参数
    String greeter = 'Welcome Gradle Plugin'
}

// 定义一个自定义插件类，实现Plugin接口
class CustomPluginA implements Plugin<Project> {

    @Override
    void apply(Project target) {
        // 将Extension注册给Plugin
        def extension = target.extensions.create('customA', CustomExtensionA)
        //...
    }
}
//它表示所有的模块都已经配置完了，可以准备执行task了
project.afterEvaluate {
    println 'n.........你好'
    // 使用Extension传入的参数,project.extensions.customA.message简写可以省略extensions
    println project.customA.message
}


// 配置CustomExtensionA，需要使用注册名，这里是customA
customA.message = 'Hi from PluginA，你好'

/**---------------- 自定义插件：引用在buildSrc模块中定义的插件，使用插件类名的全限定名 ----------------*/
// 使用gradlew -q CustomPluginTaskB查看插件是否生效
apply plugin: com.zjx.happy.plugin.CustomPluginB


/**---------------- 自定义插件：引用已经发布到Maven的插件 ----------------*/
apply plugin: 'com.happy.custompluginc'

/**---------------- 自定义插件：利用Transform向MainActivity中插入代码 ----------------*/
apply plugin: 'com.happy.customplugin.transform'


customA {
    message '你好呀'
}